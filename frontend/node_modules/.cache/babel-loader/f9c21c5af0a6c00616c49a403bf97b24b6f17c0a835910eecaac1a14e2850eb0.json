{"ast":null,"code":"var _jsxFileName = \"/Users/yichen/Local Github/milestone-3-programmingape/frontend/src/components/ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport styles from \"./ChatWindow.module.css\";\nimport Footer from \"./Footer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatWindow = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [moreQuestions, setMoreQuestions] = useState({\n    explain_more_questions: \"\",\n    in_depth_questions: \"\",\n    in_width_questions: \"\"\n  });\n  const sendQuestionToAPI = async question => {\n    const response = await fetch(\"http://127.0.0.1:5000/ask_question\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        question\n      })\n    });\n    const answer = await response.json();\n    console.log(answer);\n    return answer[\"answer\"];\n  };\n  const getMoreQuestionsFromAPI = async () => {\n    const response = await fetch(\"http://127.0.0.1:5000/suggest_new_questions\", {\n      method: \"GET\"\n    });\n    const questions = await response.json();\n    console.log(questions);\n    // {\"explain_more_questions\": explain_more_questions, \"in_depth_questions\": in_depth_questions, \"in_width_questions\": in_width_questions}\n    // set to moreQuestions\n    setMoreQuestions(questions);\n    return questions;\n  };\n  useEffect(() => {\n    if (messages.length > 0 && messages[messages.length - 1].sender !== \"chatgpt\") {\n      const fetchAnswerAndUpdateMessages = async () => {\n        const question = messages[messages.length - 1].text;\n        const answer = await sendQuestionToAPI(question);\n        // const questions = await getMoreQuestionsFromAPI();\n        handleSendMessage({\n          text: answer,\n          sender: \"chatgpt\"\n        });\n      };\n      fetchAnswerAndUpdateMessages();\n    }\n  }, [messages]);\n  const handleSendMessage = message => {\n    setMessages([...messages, message]);\n  };\n  const chatMessagesContainerRef = useRef(null);\n  useEffect(() => {\n    if (chatMessagesContainerRef.current) {\n      chatMessagesContainerRef.current.scrollTop = chatMessagesContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n  const renderChatGPTMessageButtons = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.chatGPTMessageButtons,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.chatGPTMessageButton,\n        children: moreQuestions.explain_more_questions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.chatGPTMessageButton,\n        children: moreQuestions.in_depth_questions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.chatGPTMessageButton,\n        children: moreQuestions.in_width_questions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chatWindow,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.chatMessagesContainer,\n      ref: chatMessagesContainerRef,\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.messageContainer} ${message.sender === \"user\" ? styles.userMessage : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${styles.avatar} ${message.sender === \"user\" ? styles.userAvatar : styles.chatGPTAvatar}`,\n          children: message.sender === \"user\" ? \"G\" : \"C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: message.sender === \"user\" ? styles.userMessageBubble : styles.chatGPTMessageBubble,\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      onSendMessage: text => handleSendMessage({\n        text,\n        sender: \"user\"\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatWindow, \"KX1yLEm6g3KWEEUp1Y9PyayDH5U=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styles","Footer","jsxDEV","_jsxDEV","ChatWindow","_s","messages","setMessages","moreQuestions","setMoreQuestions","explain_more_questions","in_depth_questions","in_width_questions","sendQuestionToAPI","question","response","fetch","method","headers","body","JSON","stringify","answer","json","console","log","getMoreQuestionsFromAPI","questions","length","sender","fetchAnswerAndUpdateMessages","text","handleSendMessage","message","chatMessagesContainerRef","current","scrollTop","scrollHeight","renderChatGPTMessageButtons","className","chatGPTMessageButtons","children","chatGPTMessageButton","fileName","_jsxFileName","lineNumber","columnNumber","chatWindow","chatMessagesContainer","ref","map","index","messageContainer","userMessage","avatar","userAvatar","chatGPTAvatar","userMessageBubble","chatGPTMessageBubble","onSendMessage","_c","$RefreshReg$"],"sources":["/Users/yichen/Local Github/milestone-3-programmingape/frontend/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport styles from \"./ChatWindow.module.css\";\nimport Footer from \"./Footer\";\n\nconst ChatWindow = () => {\n    const [messages, setMessages] = useState([]);\n    const [moreQuestions, setMoreQuestions] = useState({\n      explain_more_questions: \"\",\n      in_depth_questions: \"\",\n      in_width_questions: \"\",\n    });\n\n    const sendQuestionToAPI = async (question) => {\n      const response = await fetch(\"http://127.0.0.1:5000/ask_question\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ question }),\n      });\n      const answer = await response.json();\n      console.log(answer);\n      return answer[\"answer\"];\n    };\n\n    const getMoreQuestionsFromAPI = async () => {\n      const response = await fetch(\"http://127.0.0.1:5000/suggest_new_questions\", {\n        method: \"GET\"\n      });\n      const questions = await response.json();\n      console.log(questions);\n      // {\"explain_more_questions\": explain_more_questions, \"in_depth_questions\": in_depth_questions, \"in_width_questions\": in_width_questions}\n      // set to moreQuestions\n      setMoreQuestions(questions);\n      return questions;\n    };\n\n\n    useEffect(() => {\n      if (\n        messages.length > 0 &&\n        messages[messages.length - 1].sender !== \"chatgpt\"\n      ) {\n        const fetchAnswerAndUpdateMessages = async () => {\n          const question = messages[messages.length - 1].text;\n          const answer = await sendQuestionToAPI(question);\n          // const questions = await getMoreQuestionsFromAPI();\n          handleSendMessage({ text: answer, sender: \"chatgpt\" });\n        };\n  \n        fetchAnswerAndUpdateMessages();\n      }\n    }, [messages]);\n  \n    const handleSendMessage = (message) => {\n      setMessages([...messages, message]);\n    };\n\n    const chatMessagesContainerRef = useRef(null);\n\n    useEffect(() => {\n        if (chatMessagesContainerRef.current) {\n        chatMessagesContainerRef.current.scrollTop = chatMessagesContainerRef.current.scrollHeight;\n        }\n    }, [messages]);\n\n    const renderChatGPTMessageButtons = () => {\n      return (\n          <div className={styles.chatGPTMessageButtons}>\n              <button className={styles.chatGPTMessageButton}>\n                  {moreQuestions.explain_more_questions}\n              </button>\n              <button className={styles.chatGPTMessageButton}>\n                  {moreQuestions.in_depth_questions}\n              </button>\n              <button className={styles.chatGPTMessageButton}>\n                  {moreQuestions.in_width_questions}\n              </button>\n          </div>\n      );\n  };\n\n    return (\n        <div className={styles.chatWindow}>\n          <div className={styles.chatMessagesContainer} ref={chatMessagesContainerRef}>\n            {messages.map((message, index) => (\n              <div key={index} className={`${styles.messageContainer} ${message.sender === \"user\" ? styles.userMessage : \"\"}`}>\n                <div className={`${styles.avatar} ${message.sender === \"user\" ? styles.userAvatar : styles.chatGPTAvatar}`}>{message.sender === \"user\" ? \"G\" : \"C\"}</div>\n                <div className={message.sender === \"user\" ? styles.userMessageBubble : styles.chatGPTMessageBubble}>\n                    {message.text}\n                    {/* {message.sender !== \"user\" && renderChatGPTMessageButtons()} */}\n                </div>\n              </div>\n            ))}\n          </div>\n          <Footer onSendMessage={(text) => handleSendMessage({ text, sender: \"user\" })} />\n        </div>\n    );\n};\n\nexport default ChatWindow;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}